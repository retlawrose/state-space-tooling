// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright (c) 2019 Verizon Media, Inc.  See the LICENSE statement nearby.
#divert <fpp>
namespace sst::database {
  //
  // The Hyperledger Fabric World-State Database.
  // A LevelDB
  //
  // RAII to acquire contact with the database.
  // Either construction occurs or an exception:Status is thrown.
  //
  // [[FIXTHIS]] Arguably this should be part a more general support package
  //    in fabric-sdk-c++ in namespace hyperledger::fabric 
  //    in module-leveldb in namespace level::db2
  //
  // Usage:
  //
  //   try {
  //     auto filepath = std::fileystem::path{...somehow...};
  //     auto filepath = std::fileystem::path{"/var/hyperledger/fabric/production"};
  //     database::Location location{filepath};
  //     database:State state{location};
  //     for (auto pair : state.range()) {
  //       ...use the pair...   which is a std::pair<db2::Slice, db2::Slice>
  //     }
  //   } catch (level::db2::Status const &) {
  //     cerr << "could not open the database";
  //   } catch (std::error_code) {
  //     [[SOON]]
  //     cerr << "could not open the database";
  //   }
  //
  class State;
}
#endiv
#divert <hpp>
#import level.db2.State
#import sst.database.Location
#import level.db2.iterator.Range
class sst::database::State {
public:
  inline explicit State(Location const &);
  State(State const &) = delete;
  auto operator=(State const &) -> State & = delete;
public:
  inline auto range() -> level::db2::iterator::Range { return state.range(); }
protected:
  level::db2::State state;
};
#endiv
#divert <ipp>
#import level.db2.open
#import level.db2.exception.Status
#import std.move
namespace sst::database {
  State::State(Location const &location) {
    level::db2::opened::Result opened = level::db2::open(location);
    if (!ok(opened)) {
      throw level::db2::exception::Status{error_status(std::move(opened))};
    }
    state = value(std::move(opened));
  }
}
#endiv
