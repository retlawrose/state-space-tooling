// This is -*- c++ -*- nearly C++2a with Modules TS but in the S.C.O.L.D. stylings that are so popular these days.
// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache-2.0 license. See LICENSE file in https://github.com/yahoo/state-space-tooling/blob/master/LICENSE for terms.
#divert <fpp>
namespace tests::unit::sst { class Fixture; }
#endiv
#divert <hpp>
#import cppunit.Test
#import cppunit.test.Fixture
class tests::unit::sst::Fixture : public cppunit::test::Fixture {
public:
  auto test_usage_generate_key_Identifier() -> void;
  auto test_usage_generate_key_Pair() -> void;
  auto test_usage_generate_key_Unpredictable() -> void;
  auto test_usage_generate_key_Predictable() -> void;
  auto test_usage_generate_key_fingerprint() -> void;
  static auto suite() -> cppunit::Test *;
};
#endiv
#divert <cpp>
#import uuid.generate.random
#import sst.generate.key.Identifier
auto tests::unit::sst::Fixture::test_usage_generate_key_Identifier() -> void {
  using namespace ::sst::generate::key;
  Identifier subject0;
  Identifier subject1{uuid::generate::random()};
  CPPUNIT_ASSERT(subject0 != subject1);
  auto fp0 = fingerprint(subject0);
  auto fp1 = fingerprint(subject1);
  if (fp0 == fp1) {
    std::cerr << "SURPRISE! fingerprint collision " << format(fp1) << '\n';
  }
  CPPUNIT_ASSERT(fp0 != fp1);
}
#import sst.generate.key.Predictable
#import sst.generate.key.Pair
auto tests::unit::sst::Fixture::test_usage_generate_key_Pair() -> void {
  using namespace ::sst::generate::key;
  Pair pair0;
  Predictable generate;
  Pair pair1 = generate();
  CPPUNIT_ASSERT(pair0.identifier() != pair1.identifier());
  CPPUNIT_ASSERT(pair0.fingerprint() != pair1.fingerprint());
}
#import sst.generate.key.Unpredictable
auto tests::unit::sst::Fixture::test_usage_generate_key_Unpredictable() -> void {
  using namespace ::sst::generate::key;
  Unpredictable generate;
  auto pair1 = generate();
  auto pair2 = generate();
  std::cerr << "pair1 = " << format(pair1) << " =?= " << format(pair2) << '\n';
  CPPUNIT_ASSERT(pair1.identifier() != pair2.identifier());
  CPPUNIT_ASSERT(pair1.fingerprint() != pair2.fingerprint());
}
#import sst.generate.key.Predictable
auto tests::unit::sst::Fixture::test_usage_generate_key_Predictable() -> void {
  using namespace ::sst::generate::key;
  Predictable generate;
  auto pair1 = generate();
  auto pair2 = generate();
  CPPUNIT_ASSERT(pair1.identifier() != pair2.identifier());
  CPPUNIT_ASSERT(pair1.fingerprint() != pair2.fingerprint());
}
#import sst.generate.key.fingerprint
auto tests::unit::sst::Fixture::test_usage_generate_key_fingerprint() -> void {
  using namespace ::sst::generate::key;
  Identifier subject1{uuid::generate::random()};
  Identifier subject2{uuid::generate::random()};
  CPPUNIT_ASSERT(fingerprint(subject1) != fingerprint(subject2));
}
#import rigging.suite.io
auto tests::unit::sst::Fixture::suite() -> cppunit::Test * {
  using namespace rigging::suite;
  auto series = Stream{"sst"};
  series << []{
              auto use = Stream{"usage"};
              use << []{
                       auto gen = Stream{"generate"};
                       gen << []{
                                auto key = Stream{"key"};
                                key << call("Identifier", &Fixture::test_usage_generate_key_Identifier)
                                    << call("Unpredictable", &Fixture::test_usage_generate_key_Pair)
                                    << call("Unpredictable", &Fixture::test_usage_generate_key_Unpredictable)
                                    << call("Predictable", &Fixture::test_usage_generate_key_Predictable)
                                    << call("fingerprint", &Fixture::test_usage_generate_key_fingerprint)
                                    << END;
                                return move(key);
                              }();
                       return move(gen);
                     }()
                  << END;
              return move(use);
            }()
         << END;
  return finalize(series);
}
#endiv
